# Generated by Django 2.2.9 on 2020-10-06 16:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields
import mcod.core.db.mixins
import model_utils.fields
import modeltrans.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('organizations', '0014_auto_20200417_0907'),
    ]

    operations = [
        migrations.CreateModel(
            name='Period',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('published', 'Published'), ('draft', 'Draft')], default='published', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('is_removed', models.BooleanField(default=False)),
                ('slug', models.SlugField(blank=True, max_length=600)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('removed_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='is_removed', when={True})),
                ('published_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', when={'published'})),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('start_date', models.DateField(verbose_name='start date')),
                ('i18n', modeltrans.fields.TranslationField(fields=('slug',), required_languages=(), virtual_fields=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='periods_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='periods_modified', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
            ],
            options={
                'verbose_name': 'period',
                'verbose_name_plural': 'periods',
                'default_manager_name': 'objects',
            },
            bases=(mcod.core.db.mixins.AdminMixin, mcod.core.db.mixins.ApiMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('published', 'Published'), ('draft', 'Draft')], default='published', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('is_removed', models.BooleanField(default=False)),
                ('slug', models.SlugField(blank=True, max_length=600)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('removed_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='is_removed', when={True})),
                ('published_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', when={'published'})),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('state', models.CharField(choices=[('planned', 'Planned'), ('implemented', 'Implemented'), ('archived', 'Archived')], default='planned', max_length=11, verbose_name='type')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='end date')),
                ('new_end_date', models.DateField(blank=True, null=True, verbose_name='new end date')),
                ('link', models.URLField(verbose_name='schedule link')),
                ('i18n', modeltrans.fields.TranslationField(fields=('slug',), required_languages=(), virtual_fields=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='schedules_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='schedules_modified', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='schedules.Period', verbose_name='period')),
            ],
            options={
                'verbose_name': 'schedule',
                'verbose_name_plural': 'schedules',
                'default_manager_name': 'objects',
            },
            bases=(mcod.core.db.mixins.AdminMixin, mcod.core.db.mixins.ApiMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UserSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('published', 'Published'), ('draft', 'Draft')], default='published', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('is_removed', models.BooleanField(default=False)),
                ('slug', models.SlugField(blank=True, max_length=600)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('removed_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='is_removed', when={True})),
                ('published_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', when={'published'})),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('is_ready', models.BooleanField(default=False, help_text='assign schedule as ready', verbose_name='is ready?')),
                ('i18n', modeltrans.fields.TranslationField(fields=('slug',), required_languages=(), virtual_fields=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_schedules_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_schedules_modified', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_schedules', to='schedules.Schedule', verbose_name='schedule')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_schedules', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user schedule',
                'verbose_name_plural': 'user schedules',
                'ordering': ['created'],
                'default_manager_name': 'objects',
            },
            bases=(mcod.core.db.mixins.AdminMixin, mcod.core.db.mixins.ApiMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UserScheduleItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('published', 'Published'), ('draft', 'Draft')], default='published', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('is_removed', models.BooleanField(default=False)),
                ('slug', models.SlugField(blank=True, max_length=600)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('removed_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='is_removed', when={True})),
                ('published_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', when={'published'})),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('organization_unit', models.CharField(blank=True, max_length=150, verbose_name='institution unit')),
                ('dataset_title', models.CharField(max_length=300, verbose_name='dataset title')),
                ('format', models.CharField(choices=[('a', 'A'), ('abw', 'ABW'), ('bat', 'BAT'), ('bmp', 'BMP'), ('csv', 'CSV'), ('d', 'D'), ('dbf', 'DBF'), ('doc', 'DOC'), ('docx', 'DOCX'), ('dot', 'DOT'), ('epub', 'EPUB'), ('gif', 'GIF'), ('htm', 'HTM'), ('html', 'HTML'), ('jpe', 'JPE'), ('jpeg', 'JPEG'), ('jpg', 'JPG'), ('json', 'JSON'), ('json-ld', 'JSON-LD'), ('jsonld', 'JSONLD'), ('md', 'MD'), ('n', 'N'), ('nt', 'NT'), ('nt11', 'NT11'), ('ntriples', 'NTRIPLES'), ('odc', 'ODC'), ('odf', 'ODF'), ('odg', 'ODG'), ('odi', 'ODI'), ('odp', 'ODP'), ('ods', 'ODS'), ('odt', 'ODT'), ('pdf', 'PDF'), ('png', 'PNG'), ('pot', 'POT'), ('ppa', 'PPA'), ('ppm', 'PPM'), ('pps', 'PPS'), ('ppt', 'PPT'), ('pptx', 'PPTX'), ('ps', 'PS'), ('pwz', 'PWZ'), ('q', 'Q'), ('rd', 'RD'), ('rdf', 'RDF'), ('rdfa', 'RDFA'), ('rtf', 'RTF'), ('s', 'S'), ('shp', 'SHP'), ('svg', 'SVG'), ('tex', 'TEX'), ('texi', 'TEXI'), ('texinfo', 'TEXINFO'), ('tiff', 'TIFF'), ('trig', 'TRIG'), ('trix', 'TRIX'), ('tsv', 'TSV'), ('ttl', 'TTL'), ('turtle', 'TURTLE'), ('txt', 'TXT'), ('u', 'U'), ('vsd', 'VSD'), ('webp', 'WEBP'), ('wiz', 'WIZ'), ('wsdl', 'WSDL'), ('xbm', 'XBM'), ('xlb', 'XLB'), ('xls', 'XLS'), ('xlsx', 'XLSX'), ('xml', 'XML'), ('xpdl', 'XPDL'), ('xsl', 'XSL')], max_length=150, verbose_name='format')),
                ('is_new', models.BooleanField(default=False, verbose_name='is new?')),
                ('is_openness_score_increased', models.BooleanField(default=False, verbose_name='is openness score increased?')),
                ('is_quality_improved', models.BooleanField(default=False, verbose_name='is quality improved?')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('recommendation_state', models.CharField(choices=[('awaits', 'awaits'), ('recommended', 'recommended'), ('not_recommended', 'not recommended')], default='awaits', max_length=15, verbose_name='recommendation state')),
                ('recommendation_notes', models.TextField(blank=True, verbose_name='recommendation notes')),
                ('i18n', modeltrans.fields.TranslationField(fields=('slug',), required_languages=(), virtual_fields=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_schedule_items_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_schedule_items_modified', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_schedule_items', to='organizations.Organization', verbose_name='institution')),
                ('user_schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_schedule_items', to='schedules.UserSchedule', verbose_name='schedule')),
            ],
            options={
                'verbose_name': 'user schedule item',
                'verbose_name_plural': 'user schedule items',
                'default_manager_name': 'objects',
            },
            bases=(mcod.core.db.mixins.AdminMixin, mcod.core.db.mixins.ApiMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('success', 'success'), ('info', 'info'), ('warning', 'warning'), ('error', 'error')], default='info', max_length=20)),
                ('unread', models.BooleanField(db_index=True, default=True)),
                ('actor_object_id', models.CharField(max_length=255)),
                ('verb', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('target_object_id', models.CharField(blank=True, max_length=255, null=True)),
                ('action_object_object_id', models.CharField(blank=True, max_length=255, null=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('public', models.BooleanField(db_index=True, default=True)),
                ('deleted', models.BooleanField(db_index=True, default=False)),
                ('emailed', models.BooleanField(db_index=True, default=False)),
                ('data', jsonfield.fields.JSONField(blank=True, null=True)),
                ('action_object_content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notify_action_object', to='contenttypes.ContentType')),
                ('actor_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notify_actor', to='contenttypes.ContentType')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('target_content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notify_target', to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ('-timestamp',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('published', 'Published'), ('draft', 'Draft')], default='published', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('is_removed', models.BooleanField(default=False)),
                ('slug', models.SlugField(blank=True, max_length=600)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('removed_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='is_removed', when={True})),
                ('published_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', when={'published'})),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('text', models.TextField(verbose_name='text')),
                ('i18n', modeltrans.fields.TranslationField(fields=('slug',), required_languages=(), virtual_fields=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_schedule_item_comments_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user_schedule_item_comments_modified', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                ('user_schedule_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_schedule_item_comments', to='schedules.UserScheduleItem', verbose_name='user schedule item')),
            ],
            options={
                'verbose_name': 'comment',
                'verbose_name_plural': 'comments',
                'ordering': ['created'],
                'default_manager_name': 'objects',
            },
            bases=(mcod.core.db.mixins.AdminMixin, mcod.core.db.mixins.ApiMixin, models.Model),
        ),
        migrations.AddConstraint(
            model_name='userschedule',
            constraint=models.UniqueConstraint(fields=('schedule', 'user'), name='schedule_user_unique_together'),
        ),
        migrations.AlterIndexTogether(
            name='notification',
            index_together={('recipient', 'unread')},
        ),
    ]
