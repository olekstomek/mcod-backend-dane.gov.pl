# Generated by Django 2.2.9 on 2021-11-26 15:55

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.indexes
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mcod.core.db.mixins
import mcod.core.storages
import model_utils.fields
import modeltrans.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tags', '0013_auto_20210615_0122'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('datasets', '0031_dataset_has_high_value_data'),
    ]

    operations = [
        migrations.CreateModel(
            name='Showcase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_removed', models.BooleanField(default=False)),
                ('is_permanently_removed', models.BooleanField(default=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('published', 'Published'), ('draft', 'Draft')], default='published', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('slug', models.SlugField(blank=True, max_length=600)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('published_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', when={'published'})),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('removed_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='is_removed', when={True})),
                ('category', models.CharField(choices=[('app', 'Application'), ('www', 'Portal WWW'), ('other', 'Other')], max_length=5, verbose_name='category')),
                ('title', models.CharField(max_length=300, verbose_name='title')),
                ('notes', models.TextField(null=True, verbose_name='Notes')),
                ('author', models.CharField(blank=True, max_length=50, null=True, verbose_name='Author')),
                ('url', models.URLField(max_length=300, null=True, verbose_name='App URL')),
                ('external_datasets', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, null=True, verbose_name='external datasets')),
                ('is_mobile_app', models.BooleanField(default=False, verbose_name='is mobile app?')),
                ('is_desktop_app', models.BooleanField(default=False, verbose_name='is desktop app?')),
                ('mobile_apple_url', models.URLField(blank=True, verbose_name='Apple Store URL')),
                ('mobile_google_url', models.URLField(blank=True, verbose_name='Google Store URL')),
                ('desktop_linux_url', models.URLField(blank=True, verbose_name='Linux App URL')),
                ('desktop_macos_url', models.URLField(blank=True, verbose_name='MacOS App URL')),
                ('desktop_windows_url', models.URLField(blank=True, verbose_name='Windows App URL')),
                ('license_type', models.CharField(choices=[('free', 'Free App'), ('commercial', 'Commercial App')], max_length=10, verbose_name='license type')),
                ('image', models.ImageField(blank=True, max_length=200, null=True, storage=mcod.core.storages.ShowcasesStorage(base_url=None, location=None), upload_to='image/%Y%m%d', verbose_name='Image URL')),
                ('illustrative_graphics', models.ImageField(blank=True, max_length=200, null=True, storage=mcod.core.storages.ShowcasesStorage(base_url=None, location=None), upload_to='illustrative_graphics/%Y%m%d', verbose_name='illustrative graphics')),
                ('illustrative_graphics_alt', models.CharField(blank=True, max_length=255, verbose_name='illustrative graphics alternative text')),
                ('image_thumb', models.ImageField(blank=True, null=True, storage=mcod.core.storages.ShowcasesStorage(base_url=None, location=None), upload_to='image_thumb/%Y%m%d')),
                ('image_alt', models.CharField(blank=True, max_length=255, null=True, verbose_name='Alternative text')),
                ('file', models.FileField(blank=True, max_length=2000, null=True, storage=mcod.core.storages.ShowcasesStorage(base_url=None, location=None), upload_to='file/%Y%m%d', verbose_name='attachement')),
                ('main_page_position', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'First'), (2, 'Second'), (3, 'Third'), (4, 'Fourth')], null=True, unique=True, verbose_name='Positioning on the main page')),
                ('i18n', modeltrans.fields.TranslationField(fields=('title', 'notes', 'image_alt', 'illustrative_graphics_alt', 'slug'), required_languages=(), virtual_fields=True)),
                ('created_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='showcases_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('datasets', models.ManyToManyField(db_table='showcase_dataset', related_name='showcases', related_query_name='showcase', to='datasets.Dataset', verbose_name='Datasets')),
                ('modified_by', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='showcases_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
                ('tags', models.ManyToManyField(blank=True, db_table='showcase_tag', related_name='showcases', related_query_name='showcase', to='tags.Tag', verbose_name='Tag')),
            ],
            options={
                'verbose_name': 'Showcase',
                'verbose_name_plural': 'Showcases',
                'db_table': 'showcase',
                'abstract': False,
                'default_manager_name': 'objects',
            },
            bases=(mcod.core.db.mixins.AdminMixin, mcod.core.db.mixins.ApiMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ShowcaseProposal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_removed', models.BooleanField(default=False)),
                ('is_permanently_removed', models.BooleanField(default=False)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('published', 'Published'), ('draft', 'Draft')], default='published', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('slug', models.SlugField(blank=True, max_length=600)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('published_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', when={'published'})),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('removed_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='is_removed', when={True})),
                ('category', models.CharField(choices=[('app', 'Application'), ('www', 'Portal WWW'), ('other', 'Other')], max_length=5, verbose_name='category')),
                ('title', models.CharField(max_length=300, verbose_name='title')),
                ('notes', models.TextField(null=True, verbose_name='Notes')),
                ('author', models.CharField(blank=True, max_length=50, null=True, verbose_name='Author')),
                ('url', models.URLField(max_length=300, null=True, verbose_name='App URL')),
                ('external_datasets', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, null=True, verbose_name='external datasets')),
                ('is_mobile_app', models.BooleanField(default=False, verbose_name='is mobile app?')),
                ('is_desktop_app', models.BooleanField(default=False, verbose_name='is desktop app?')),
                ('mobile_apple_url', models.URLField(blank=True, verbose_name='Apple Store URL')),
                ('mobile_google_url', models.URLField(blank=True, verbose_name='Google Store URL')),
                ('desktop_linux_url', models.URLField(blank=True, verbose_name='Linux App URL')),
                ('desktop_macos_url', models.URLField(blank=True, verbose_name='MacOS App URL')),
                ('desktop_windows_url', models.URLField(blank=True, verbose_name='Windows App URL')),
                ('license_type', models.CharField(choices=[('free', 'Free App'), ('commercial', 'Commercial App')], max_length=10, verbose_name='license type')),
                ('applicant_email', models.EmailField(blank=True, max_length=254, verbose_name='applicant email')),
                ('image', models.ImageField(blank=True, max_length=200, null=True, storage=mcod.core.storages.ShowcasesStorage(base_url=None, location=None), upload_to='proposals/image/%Y%m%d', verbose_name='image URL')),
                ('illustrative_graphics', models.ImageField(blank=True, max_length=200, null=True, storage=mcod.core.storages.ShowcasesStorage(base_url=None, location=None), upload_to='proposals/illustrative_graphics/%Y%m%d', verbose_name='illustrative graphics')),
                ('file', models.FileField(blank=True, max_length=2000, null=True, storage=mcod.core.storages.ShowcasesStorage(base_url=None, location=None), upload_to='proposals/file/%Y%m%d', verbose_name='attachement')),
                ('keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None, verbose_name='keywords')),
                ('report_date', models.DateField(verbose_name='report date')),
                ('decision', models.CharField(blank=True, choices=[('accepted', 'Proposal accepted'), ('rejected', 'Proposal rejected')], max_length=8, verbose_name='decision')),
                ('decision_date', models.DateField(blank=True, null=True, verbose_name='decision date')),
                ('comment', models.TextField(blank=True, verbose_name='comment')),
                ('i18n', modeltrans.fields.TranslationField(fields=('slug',), required_languages=(), virtual_fields=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='showcase_proposals_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('datasets', models.ManyToManyField(blank=True, related_name='showcase_proposals', to='datasets.Dataset', verbose_name='datasets')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='showcase_proposals_modified', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                ('showcase', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='showcases.Showcase', verbose_name='showcase')),
            ],
            options={
                'verbose_name': 'Showcase Proposal',
                'verbose_name_plural': 'Showcase Proposals',
                'abstract': False,
                'default_manager_name': 'objects',
            },
            bases=(mcod.core.db.mixins.AdminMixin, mcod.core.db.mixins.ApiMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ShowcaseProposalTrash',
            fields=[
            ],
            options={
                'verbose_name': 'Showcase Proposal Trash',
                'verbose_name_plural': 'Showcase Proposals Trash',
                'abstract': False,
                'proxy': True,
                'default_manager_name': 'objects',
                'indexes': [],
                'constraints': [],
            },
            bases=('showcases.showcaseproposal',),
        ),
        migrations.CreateModel(
            name='ShowcaseTrash',
            fields=[
            ],
            options={
                'verbose_name': 'Showcase Trash',
                'verbose_name_plural': 'Showcases Trash',
                'abstract': False,
                'proxy': True,
                'default_manager_name': 'objects',
                'indexes': [],
                'constraints': [],
            },
            bases=('showcases.showcase',),
        ),
        migrations.AddIndex(
            model_name='showcase',
            index=django.contrib.postgres.indexes.GinIndex(fields=['i18n'], name='showcase_i18n_34d645_gin'),
        ),
    ]
