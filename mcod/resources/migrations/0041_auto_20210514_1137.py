# Generated by Django 2.2.9 on 2021-05-14 09:37
import logging

import requests
from django.conf import settings
from django.db import migrations
from django.db.models import Q

from mcod.resources.link_validation import _get_resource_type
from mcod.resources.tasks import process_resource_from_url_task

logger = logging.getLogger('mcod')


def change_resource_api_type_to_file(apps, schema_editor):
    resource_model = apps.get_model('resources', 'Resource')
    session = requests.Session()
    resources = resource_model.objects.filter(
        status='published', is_removed=False, link__isnull=False, type='api', forced_api_type=False).exclude(
        Q(link__contains=settings.API_URL) | Q(link__contains=settings.BASE_URL))
    logger.debug(f'Starting resource api type migration. Found {resources.count()} resources to check.')
    for res in resources:
        try:
            response = session.get(res.link, allow_redirects=True, timeout=180, verify=False)
            if response.status_code == 200:
                computed_res_type = _get_resource_type(response)
                if computed_res_type != res.type and computed_res_type == 'file':
                    logger.debug(f'Found type change for resource: {res}, revalidating.')
                    process_resource_from_url_task.s(res.id).apply_async(countdown=2)
        except requests.exceptions.ReadTimeout:
            logger.debug(f'Timeout occurred while fetching response for resource {res}, couldn\'t check type.')
        except requests.exceptions.ConnectionError as err:
            logger.debug(f'Connection error for resource {res}. Details:{err}')


class Migration(migrations.Migration):

    dependencies = [
        ('resources', '0040_resource_forced_file_type'),
    ]

    operations = [
        migrations.RunPython(change_resource_api_type_to_file, reverse_code=migrations.RunPython.noop),
    ]
