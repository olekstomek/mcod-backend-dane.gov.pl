# Generated by Django 2.2.9 on 2020-02-27 08:43

from django.db import migrations, models
import django.db.models.deletion
import hypereditor.fields
import mcod.cms.blocks.common
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailcore', '0045_assign_unlock_grouppagepermission'),
        ('cms', '0009_auto_20191217_1442'),
    ]

    operations = [
        migrations.CreateModel(
            name='FormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('title_en', models.CharField(blank=True, help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('seo_title_en', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('search_description_en', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('draft_title_en', models.CharField(editable=False, max_length=255, null=True)),
                ('intro', wagtail.core.fields.RichTextField(blank=True)),
                ('thank_you_text', wagtail.core.fields.RichTextField(blank=True)),
                ('intro_en', wagtail.core.fields.RichTextField(blank=True, null=True)),
                ('thank_you_text_en', wagtail.core.fields.RichTextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Formularz lub ankieta',
                'verbose_name_plural': 'Formularze lub ankiety',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='FormPageIndex',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title_en', models.CharField(blank=True, help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('seo_title_en', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('search_description_en', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('draft_title_en', models.CharField(editable=False, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Lista formularzy i ankiet',
                'verbose_name_plural': 'Listy formularzy i ankiet',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='LandingPageIndex',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title_en', models.CharField(blank=True, help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('seo_title_en', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('search_description_en', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('draft_title_en', models.CharField(editable=False, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Lista stron startowych',
                'verbose_name_plural': 'Listy stron startowych',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SimplePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title_en', models.CharField(blank=True, help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('seo_title_en', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('search_description_en', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('draft_title_en', models.CharField(editable=False, max_length=255, null=True)),
                ('body', wagtail.core.fields.RichTextField(blank=True)),
                ('body_en', wagtail.core.fields.RichTextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Prosta strona WWW',
                'verbose_name_plural': 'Proste strony WWW',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SimplePageIndex',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('title_en', models.CharField(blank=True, help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title')),
                ('seo_title_en', models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title')),
                ('search_description_en', models.TextField(blank=True, null=True, verbose_name='search description')),
                ('draft_title_en', models.CharField(editable=False, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Lista prostych stron WWW',
                'verbose_name_plural': 'Listy prostych stron WWW',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.RemoveField(
            model_name='rootpage',
            name='background_color',
        ),
        migrations.RemoveField(
            model_name='rootpage',
            name='background_image',
        ),
        migrations.RemoveField(
            model_name='rootpage',
            name='background_paralax',
        ),
        migrations.AddField(
            model_name='landingpage',
            name='body_en',
            field=hypereditor.fields.HyperField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name='landingpage',
            name='draft_title_en',
            field=models.CharField(editable=False, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='landingpage',
            name='search_description_en',
            field=models.TextField(blank=True, null=True, verbose_name='search description'),
        ),
        migrations.AddField(
            model_name='landingpage',
            name='seo_title_en',
            field=models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title'),
        ),
        migrations.AddField(
            model_name='landingpage',
            name='title_en',
            field=models.CharField(blank=True, help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title'),
        ),
        migrations.AddField(
            model_name='rootpage',
            name='draft_title_en',
            field=models.CharField(editable=False, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='rootpage',
            name='over_latest_news_cb_en',
            field=wagtail.core.fields.StreamField([('cta', wagtail.core.blocks.StructBlock([('background', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(help_text='Obraz tła może być również animowanym gifem. Zalecany rozmiar: 1920 x 340 pikseli.', label='Obraz w tle', required=False)), ('color', mcod.cms.blocks.common.ColorPickerBlock(default='#ffffff', help_text='Kolor tła będzie zawsze pod spodem wszystkich innych elementów bloku (w tym również obrazu tła).', label='Kolor tła', required=False)), ('paralax', wagtail.core.blocks.BooleanBlock(default=False, help_text='Przy włączonym efekcie paralaksy tło przewija się wolniej niż pozostałe elementy strony, co tworzy wrażenie głębi.', label='Efekt paralaksy', required=False))], label='Tło bloku')), ('image', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(help_text='Obrazek, który będzie wyświetlany obok tekstu. Zalecany rozmiar: 1920 x 340 pikseli.', label='Obrazek', required=False)), ('position', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'od lewej'), ('center', 'na środku'), ('right', 'od prawej')], help_text='\n                                Położenie obrazka względem tytułu oraz tekstu.\n                                ', label='Położenie', required=False))], label='Obraz obok tekstu')), ('header', wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.CharBlock(help_text='Maksymalnie 20 znaków.', label='Tytuł', max_length=20, required=False)), ('align', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'od lewej'), ('center', 'na środku'), ('right', 'od prawej')], help_text='\n                                    Określa położenie tekstu w bloku.\n                                    ', label='Wyrównanie'))], label='Tytuł')), ('text', wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.TextBlock(help_text='Treść tekstu wyświetlanego pod tytułem. Maksymalnie 4 linie, 200 znaków.', label='Tekst', max_length=200, required=False, rows=4)), ('align', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'od lewej'), ('center', 'na środku'), ('right', 'od prawej')], help_text='Określa położenie tekstu w bloku.', label='Wyrównanie', required=False))], label='Tekst pod tytułem')), ('button', wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.CharBlock(help_text='Maksymalnie 20 znaków.', label='Tekst na przycisku', max_length=20, required=True)), ('position', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'od lewej'), ('center', 'na środku'), ('right', 'od prawej')], label='Położenie', required=False)), ('size', wagtail.core.blocks.ChoiceBlock(choices=[('btn-normal', 'Normalny'), ('btn-sm', 'Mały'), ('btn-lg', 'Duży')], label='Rozmiar', required=False)), ('style', wagtail.core.blocks.ChoiceBlock(choices=[('btn-primary', 'Niebieski'), ('btn-secondary', 'Szary'), ('btn-success', 'Zielony'), ('btn-danger', 'Czerwony'), ('btn-warning', 'Żółty'), ('btn-info', 'Turkusowy'), ('btn-light', 'Jasny'), ('btn-dark', 'Ciemny'), ('btn-link', 'Link')], label='Styl', required=False)), ('action_url', wagtail.core.blocks.URLBlock(help_text='Strona, na którą zostanie przekierowany użytkownik po naciśnięciu przycisku.', label='Adres URL', required=True)), ('target', wagtail.core.blocks.ChoiceBlock(choices=[('_self', 'To samo okno'), ('_blank', 'Nowe okno')], help_text='Cel określa, czy strona w polu "Adres URL" ma się otwierać w tym samym, czy też w nowym oknie.', label='Cel', required=False))], label='Przycisk'))], label='Call To Action', required=False)), ('banner', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(help_text='\n                                Obrazek bannera. Zalecany rozmiar: 1920 x 340 pikseli.\n                                ', label='Obrazek', required=True)), ('action_url', wagtail.core.blocks.URLBlock(help_text='Strona, na którą zostanie przekierowany użytkownik po naciśnięciu na baner.', label='Adres URL', required=True)), ('target', wagtail.core.blocks.ChoiceBlock(choices=[('_self', 'To samo okno'), ('_blank', 'Nowe okno')], help_text='Cel określa, czy strona w polu "Adres URL" ma się otwierać w tym samym, czy też w nowym oknie.', label='Cel', required=False))], label='Baner reklamowy', required=False)), ('text', mcod.cms.blocks.common.RichTextBlock(label='Tekst sformatowany', required=False)), ('raw_html', mcod.cms.blocks.common.RawHTMLBlock(label='Kod HTML', required=False))], blank=True, default=None, help_text='TODO: napisać', verbose_name='Blok nad sekcją "Aktualności"'),
        ),
        migrations.AddField(
            model_name='rootpage',
            name='over_search_field_cb_en',
            field=wagtail.core.fields.StreamField([('cta', wagtail.core.blocks.StructBlock([('background', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(help_text='Obraz tła może być również animowanym gifem. Zalecany rozmiar: 1920 x 340 pikseli.', label='Obraz w tle', required=False)), ('color', mcod.cms.blocks.common.ColorPickerBlock(default='#ffffff', help_text='Kolor tła będzie zawsze pod spodem wszystkich innych elementów bloku (w tym również obrazu tła).', label='Kolor tła', required=False)), ('paralax', wagtail.core.blocks.BooleanBlock(default=False, help_text='Przy włączonym efekcie paralaksy tło przewija się wolniej niż pozostałe elementy strony, co tworzy wrażenie głębi.', label='Efekt paralaksy', required=False))], label='Tło bloku')), ('image', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(help_text='Obrazek, który będzie wyświetlany obok tekstu. Zalecany rozmiar: 1920 x 340 pikseli.', label='Obrazek', required=False)), ('position', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'od lewej'), ('center', 'na środku'), ('right', 'od prawej')], help_text='\n                                Położenie obrazka względem tytułu oraz tekstu.\n                                ', label='Położenie', required=False))], label='Obraz obok tekstu')), ('header', wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.CharBlock(help_text='Maksymalnie 20 znaków.', label='Tytuł', max_length=20, required=False)), ('align', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'od lewej'), ('center', 'na środku'), ('right', 'od prawej')], help_text='\n                                    Określa położenie tekstu w bloku.\n                                    ', label='Wyrównanie'))], label='Tytuł')), ('text', wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.TextBlock(help_text='Treść tekstu wyświetlanego pod tytułem. Maksymalnie 4 linie, 200 znaków.', label='Tekst', max_length=200, required=False, rows=4)), ('align', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'od lewej'), ('center', 'na środku'), ('right', 'od prawej')], help_text='Określa położenie tekstu w bloku.', label='Wyrównanie', required=False))], label='Tekst pod tytułem')), ('button', wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.CharBlock(help_text='Maksymalnie 20 znaków.', label='Tekst na przycisku', max_length=20, required=True)), ('position', wagtail.core.blocks.ChoiceBlock(choices=[('left', 'od lewej'), ('center', 'na środku'), ('right', 'od prawej')], label='Położenie', required=False)), ('size', wagtail.core.blocks.ChoiceBlock(choices=[('btn-normal', 'Normalny'), ('btn-sm', 'Mały'), ('btn-lg', 'Duży')], label='Rozmiar', required=False)), ('style', wagtail.core.blocks.ChoiceBlock(choices=[('btn-primary', 'Niebieski'), ('btn-secondary', 'Szary'), ('btn-success', 'Zielony'), ('btn-danger', 'Czerwony'), ('btn-warning', 'Żółty'), ('btn-info', 'Turkusowy'), ('btn-light', 'Jasny'), ('btn-dark', 'Ciemny'), ('btn-link', 'Link')], label='Styl', required=False)), ('action_url', wagtail.core.blocks.URLBlock(help_text='Strona, na którą zostanie przekierowany użytkownik po naciśnięciu przycisku.', label='Adres URL', required=True)), ('target', wagtail.core.blocks.ChoiceBlock(choices=[('_self', 'To samo okno'), ('_blank', 'Nowe okno')], help_text='Cel określa, czy strona w polu "Adres URL" ma się otwierać w tym samym, czy też w nowym oknie.', label='Cel', required=False))], label='Przycisk'))], label='Call To Action', required=False)), ('banner', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(help_text='\n                                Obrazek bannera. Zalecany rozmiar: 1920 x 340 pikseli.\n                                ', label='Obrazek', required=True)), ('action_url', wagtail.core.blocks.URLBlock(help_text='Strona, na którą zostanie przekierowany użytkownik po naciśnięciu na baner.', label='Adres URL', required=True)), ('target', wagtail.core.blocks.ChoiceBlock(choices=[('_self', 'To samo okno'), ('_blank', 'Nowe okno')], help_text='Cel określa, czy strona w polu "Adres URL" ma się otwierać w tym samym, czy też w nowym oknie.', label='Cel', required=False))], label='Baner reklamowy', required=False)), ('text', mcod.cms.blocks.common.RichTextBlock(label='Tekst sformatowany', required=False)), ('raw_html', mcod.cms.blocks.common.RawHTMLBlock(label='Kod HTML', required=False))], blank=True, default=None, help_text='TODO: napisać', verbose_name='Blok nad wyszukiwarką'),
        ),
        migrations.AddField(
            model_name='rootpage',
            name='search_description_en',
            field=models.TextField(blank=True, null=True, verbose_name='search description'),
        ),
        migrations.AddField(
            model_name='rootpage',
            name='seo_title_en',
            field=models.CharField(blank=True, help_text="Optional. 'Search Engine Friendly' title. This will appear at the top of the browser window.", max_length=255, null=True, verbose_name='page title'),
        ),
        migrations.AddField(
            model_name='rootpage',
            name='title_en',
            field=models.CharField(blank=True, help_text="The page title as you'd like it to be seen by the public", max_length=255, null=True, verbose_name='title'),
        ),
        migrations.CreateModel(
            name='FormFieldEn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields_en', to='cms.FormPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='cms.FormPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
