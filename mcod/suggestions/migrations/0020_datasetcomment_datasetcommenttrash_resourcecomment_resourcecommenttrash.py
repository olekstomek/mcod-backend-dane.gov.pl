# Generated by Django 2.2.9 on 2020-08-05 07:31

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mcod.core.db.mixins
import model_utils.fields
import modeltrans.fields
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('datasets', '0023_auto_20200219_1636'),
        ('resources', '0026_resource_csv_file'),
        ('suggestions', '0019_accepteddatasetsubmissiontrash'),
    ]

    operations = [
        migrations.CreateModel(
            name='ResourceComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('published', 'Published'), ('draft', 'Draft')], default='published', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('is_removed', models.BooleanField(default=False)),
                ('slug', models.SlugField(blank=True, max_length=600)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('removed_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='is_removed', when={True})),
                ('published_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', when={'published'})),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('comment', models.TextField(blank=True, verbose_name='comment')),
                ('editor_comment', models.TextField(blank=True, verbose_name='comment')),
                ('report_date', models.DateField(verbose_name='report date')),
                ('decision', models.CharField(blank=True, choices=[('accepted', 'Comment accepted'), ('rejected', 'Comment rejected')], max_length=8, verbose_name='decision')),
                ('decision_date', models.DateField(blank=True, null=True, verbose_name='decision date')),
                ('is_data_provider_error', models.BooleanField(default=False, verbose_name='data provider error')),
                ('is_user_error', models.BooleanField(default=False, verbose_name='user error')),
                ('is_portal_error', models.BooleanField(default=False, verbose_name='portal error')),
                ('is_other_error', models.BooleanField(default=False, verbose_name='other error')),
                ('i18n', modeltrans.fields.TranslationField(fields=('slug',), required_languages=(), virtual_fields=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='resource_comments_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='resource_comments_modified', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='resources.Resource', verbose_name='resource')),
            ],
            options={
                'verbose_name': 'Resource comment',
                'verbose_name_plural': 'Resource comments',
                'abstract': False,
                'default_manager_name': 'objects',
            },
            bases=(mcod.core.db.mixins.AdminMixin, mcod.core.db.mixins.ApiMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DatasetComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('published', 'Published'), ('draft', 'Draft')], default='published', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('is_removed', models.BooleanField(default=False)),
                ('slug', models.SlugField(blank=True, max_length=600)),
                ('uuid', models.UUIDField(default=uuid.uuid4)),
                ('removed_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='is_removed', when={True})),
                ('published_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', when={'published'})),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('comment', models.TextField(blank=True, verbose_name='comment')),
                ('editor_comment', models.TextField(blank=True, verbose_name='comment')),
                ('report_date', models.DateField(verbose_name='report date')),
                ('decision', models.CharField(blank=True, choices=[('accepted', 'Comment accepted'), ('rejected', 'Comment rejected')], max_length=8, verbose_name='decision')),
                ('decision_date', models.DateField(blank=True, null=True, verbose_name='decision date')),
                ('is_data_provider_error', models.BooleanField(default=False, verbose_name='data provider error')),
                ('is_user_error', models.BooleanField(default=False, verbose_name='user error')),
                ('is_portal_error', models.BooleanField(default=False, verbose_name='portal error')),
                ('is_other_error', models.BooleanField(default=False, verbose_name='other error')),
                ('i18n', modeltrans.fields.TranslationField(fields=('slug',), required_languages=(), virtual_fields=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='dataset_comments_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='datasets.Dataset', verbose_name='dataset')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='dataset_comments_modified', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
            ],
            options={
                'verbose_name': 'Dataset comment',
                'verbose_name_plural': 'Dataset comments',
                'abstract': False,
                'default_manager_name': 'objects',
            },
            bases=(mcod.core.db.mixins.AdminMixin, mcod.core.db.mixins.ApiMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DatasetCommentTrash',
            fields=[
            ],
            options={
                'verbose_name': 'Dataset Comment - Trash',
                'verbose_name_plural': 'Dataset Comments - Trash',
                'abstract': False,
                'proxy': True,
                'default_manager_name': 'objects',
                'indexes': [],
                'constraints': [],
            },
            bases=('suggestions.datasetcomment',),
        ),
        migrations.CreateModel(
            name='ResourceCommentTrash',
            fields=[
            ],
            options={
                'verbose_name': 'Resource Comment - Trash',
                'verbose_name_plural': 'Resource Comments - Trash',
                'abstract': False,
                'proxy': True,
                'default_manager_name': 'objects',
                'indexes': [],
                'constraints': [],
            },
            bases=('suggestions.resourcecomment',),
        ),
    ]
